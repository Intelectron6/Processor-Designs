module inst_mem (input [15:0] pc, output wire [15:0] instruction);
  
	wire [5:0] rom_addr = pc [5:0];  
	reg [15:0] rom [0:63];  
	
	initial
	begin
	//Replace this part with the code generated by Python assembler
		rom[0] = 16'b0000000000000000;
		rom[1] = 16'b0000000000000000;
		rom[2] = 16'b0000000000000000;
		rom[3] = 16'b0000000000000000;
		rom[4] = 16'b0000000000000000;
		rom[5] = 16'b0000000000000000;
		rom[6] = 16'b0000000000000000;
		rom[7] = 16'b0000000000000000;
		rom[8] = 16'b0000000000000000;
		rom[9] = 16'b0000000000000000;
		rom[10] = 16'b0000000000000000;
		rom[11] = 16'b0000000000000000;
		rom[12] = 16'b0000000000000000;
		rom[13] = 16'b0000000000000000;
		rom[14] = 16'b0000000000000000;
		rom[15] = 16'b0000000000000000;
		rom[16] = 16'b0000000000000000;
		rom[17] = 16'b0000000000000000;
		rom[18] = 16'b0000000000000000;
		rom[19] = 16'b0000000000000000;
		rom[20] = 16'b0000000000000000;
		rom[21] = 16'b0000000000000000;
		rom[22] = 16'b0000000000000000;
		rom[23] = 16'b0000000000000000;
		rom[24] = 16'b0000000000000000;
		rom[25] = 16'b0000000000000000;
		rom[26] = 16'b0000000000000000;
		rom[27] = 16'b0000000000000000;
		rom[28] = 16'b0000000000000000;
		rom[29] = 16'b0000000000000000;
		rom[30] = 16'b0000000000000000;
		rom[31] = 16'b0000000000000000;
		rom[32] = 16'b0000000000000000;
		rom[33] = 16'b0000000000000000;
		rom[34] = 16'b0000000000000000;
		rom[35] = 16'b0000000000000000;
		rom[36] = 16'b0000000000000000;
		rom[37] = 16'b0000000000000000;
		rom[38] = 16'b0000000000000000;
		rom[39] = 16'b0000000000000000;
		rom[40] = 16'b0000000000000000;
		rom[41] = 16'b0000000000000000;
		rom[42] = 16'b0000000000000000;
		rom[43] = 16'b0000000000000000;
		rom[44] = 16'b0000000000000000;
		rom[45] = 16'b0000000000000000;
		rom[46] = 16'b0000000000000000;
		rom[47] = 16'b0000000000000000;
		rom[48] = 16'b0000000000000000;
		rom[49] = 16'b0000000000000000;
		rom[50] = 16'b0000000000000000;
		rom[51] = 16'b0000000000000000;
		rom[52] = 16'b0000000000000000;
		rom[53] = 16'b0000000000000000;
		rom[54] = 16'b0000000000000000;
		rom[55] = 16'b0000000000000000;
		rom[56] = 16'b0000000000000000;
		rom[57] = 16'b0000000000000000;
		rom[58] = 16'b0000000000000000;
		rom[59] = 16'b0000000000000000;
		rom[60] = 16'b0000000000000000;
		rom[61] = 16'b0000000000000000;
		rom[62] = 16'b0000000000000000;
		rom[63] = 16'b0000000000000000;
	end
	
	assign instruction = rom [rom_addr];	
	
endmodule